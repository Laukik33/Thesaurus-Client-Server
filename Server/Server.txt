/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package thesaurus;

import java.net.*;
import java.io.*;
import java.sql.*;



//Class Server contains code for the Server 
public class Server extends javax.swing.JFrame {
    // Defining the variables 
    static ServerSocket socket1;
    static Socket connection;
    static boolean first;
    static StringBuffer process;
    static String returnCode = "";
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Exit_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        c_req = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Thesaurus Server");

        Exit_Button.setText("Exit");
        Exit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Incoming Client request :");

        c_req.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(c_req, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(Exit_Button)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(c_req, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(Exit_Button)
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Exit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_ButtonActionPerformed
        try {
            socket1.close();                                                     //Socket  closes once server is exited
            connection.close();                                                  //Connection to the server is closed 
        } catch (Exception ex) {
            //System.out.println(ex.toString());  
        }
        finally
        {
            dispose();                                                          //method is used to end the connection of server
        }
    }//GEN-LAST:event_Exit_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Server().setVisible(true);
            }
        });
        
         try{
             socket1 = new ServerSocket(18888);                                 //Defining the server socket and start listening at  port number 18888
             System.out.println("SingleSocketServer Initialized");              
             int character;
      
             while (true) 
             {             
              connection = socket1.accept();                                                  //Listening and accepting the client's connection 
                 System.out.println("Established connection with client");
              /*
              Ceating an input stream to read the request from the client
              We use end of character 15 so that server understands when to stop reading the request
              */
              BufferedInputStream is = new BufferedInputStream(connection.getInputStream());
              InputStreamReader isr = new InputStreamReader(is);
              process = new StringBuffer();                                                              
            
             while((character = isr.read()) != 15)                                                            //read the characters until it reaches end of character i.e: 15 in this case
             {
              process.append((char)character);                                                                // goes on appending the characters that are recieved from the user
             }
        
              c_req.setText(process.toString());                                                              //c_req is the variable name for JLabel that displays incoming client request                           
          
              /*
              Creating a database connection using DriverManager to look for synonyms of the entered word.
              If the word is not found then the response is "Word not found"
              */
              Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");                                                 //Loading the jdbc odbc driver             
              try (Connection con = DriverManager.getConnection("jdbc:odbc:mydsn","","");                    //creating connection with the database
                     Statement st = con.createStatement())                                                   
                    {      
                     ResultSet rs = st.executeQuery("Select Synonyms from SynonymsDB where word='"+ process +"'");       //Executing a Select query on the database to select synonyms of the requested word
                     ResultSetMetaData rsmd = rs.getMetaData();
                     int numberOfColumns = rsmd.getColumnCount();                                                     //returns the number of columns in the selected table
                     
                     
                     if (!rs.next() )
                     {
                         c_req.setText("");
                         returnCode = "Word not found" + (char) 15;                                                     //If the resultset contains no data then Word not found is returned
                     }
                     else
                     {
                         do {                                                                                           //do while loop and do while loop code used to print the data 
                             for (int i = 1; i <= numberOfColumns; i++)                                                
                             {
                               if (i > 1)
                                 System.out.print(", ");
                                 String columnValue = rs.getString(i);
                                 //System.out.print(columnValue);                                                        //prints all the synonms present in the column separated by a ","
                                 returnCode = (columnValue) + (char) 15;
                             }
                         } while (rs.next());
                     }

                     BufferedOutputStream os = new BufferedOutputStream(connection.getOutputStream());                  //gets a reference to the socket's output stream
                     OutputStreamWriter osw = new OutputStreamWriter(os, "US-ASCII");                                   //Writing to the socket's output stream
                     osw.write(returnCode);                                                                             //writes the response to socket's output port
                     osw.flush();                                                                                       //Flush out output stream
                 }
     } 
    }
        /*
         *If some exception occurs in DB side or DB is not running 
         *throw SQL exception, which is caught and a useful error message is shown to user.
         */
         catch(  SQLException | IOException | ClassNotFoundException ex){                                                   //If some exception occurs in DB side or DB is not running 
        System.err.print("Exception: ");
                      System.err.println(ex.getMessage());
                      
    }
  } 
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit_Button;
    public static javax.swing.JTextField c_req;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
